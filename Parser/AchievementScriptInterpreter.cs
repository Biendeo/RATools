using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Jamiras.Components;
using RATools.Data;
using RATools.Parser.Internal;

namespace RATools.Parser
{
    public partial class AchievementScriptInterpreter
    {
        public AchievementScriptInterpreter()
        {
            _achievements = new List<Achievement>();
            _leaderboards = new List<Leaderboard>();
            _richPresence = new RichPresenceBuilder();
        }

        private readonly RichPresenceBuilder _richPresence;

        /// <summary>
        /// Gets the achievements generated by the script.
        /// </summary>
        public IEnumerable<Achievement> Achievements
        {
            get { return _achievements; }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private List<Achievement> _achievements;

        /// <summary>
        /// Gets the error message generated by the script if processing failed.
        /// </summary>
        public string ErrorMessage { get; private set; }

        /// <summary>
        /// Gets the game identifier from the script.
        /// </summary>
        public int GameId { get; private set; }

        /// <summary>
        /// Gets the game title from the script.
        /// </summary>
        public string GameTitle { get; private set; }

        /// <summary>
        /// Gets the rich presence script generated by the script.
        /// </summary>
        public string RichPresence { get; private set; }

        /// <summary>
        /// Gets the leaderboards generated by the script.
        /// </summary>
        public IEnumerable<Leaderboard> Leaderboards
        {
            get { return _leaderboards; }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private List<Leaderboard> _leaderboards;

        /// <summary>
        /// Processes the provided script.
        /// </summary>
        /// <returns>
        /// <c>true</c> if the script was successfully processed, 
        /// <c>false</c> if not - in which case <see cref="ErrorMessage"/> will indicate why.
        /// </returns>
        public bool Run(Tokenizer input)
        {
            var scope = new InterpreterScope();
            var expressionGroup = new AchievementScriptParser().Parse(input);

            if (expressionGroup.Comments.Count > 0)
            {
                GameTitle = expressionGroup.Comments[0].Value.Substring(2).Trim();

                foreach (var comment in expressionGroup.Comments)
                {
                    if (comment.Value.Contains("#ID"))
                    {
                        ExtractGameId(new Token(comment.Value, 0, comment.Value.Length));
                        break;
                    }
                }
            }

            var parseError = expressionGroup.Expressions.OfType<ParseErrorExpression>().FirstOrDefault();
            if (parseError != null)
            {
                ErrorMessage = String.Format("{0}:{1} {2}", parseError.Line, parseError.EndColumn > 0 ? parseError.EndColumn : parseError.Column, parseError.Message);
                return false;
            }

            if (!Evaluate(expressionGroup.Expressions, scope))
                return false;

            RichPresence = _richPresence.ToString();
            return true;
        }

        private void ExtractGameId(Token line)
        {
            var tokens = line.Split('=');
            if (tokens.Length > 1)
            {
                int gameId;
                if (Int32.TryParse(tokens[1].ToString(), out gameId))
                    GameId = gameId;
            }
        }

        internal bool Evaluate(IEnumerable<ExpressionBase> expressions, InterpreterScope scope)
        {
            foreach (var expression in expressions)
            {
                if (!Evaluate(expression, scope))
                    return false;

                if (scope.IsComplete)
                    break;
            }

            return true;
        }

        private bool Evaluate(ExpressionBase expression, InterpreterScope scope)
        {
            switch (expression.Type)
            {
                case ExpressionType.Assignment:
                    var assignment = (AssignmentExpression)expression;
                    ExpressionBase result;
                    if (!assignment.Value.ReplaceVariables(scope, out result))
                        return EvaluationError(assignment.Value, result);

                    scope.AssignVariable(assignment.Variable, result);
                    return true;

                case ExpressionType.FunctionCall:
                    return CallFunction((FunctionCallExpression)expression, scope);

                case ExpressionType.For:
                    return EvaluateLoop((ForExpression)expression, scope);

                case ExpressionType.If:
                    return EvaluateIf((IfExpression)expression, scope);

                case ExpressionType.Return:
                    return EvaluateReturn((ReturnExpression)expression, scope);

                case ExpressionType.ParseError:
                    return EvaluationError(expression, expression);

                case ExpressionType.FunctionDefinition:
                    return EvaluateFunctionDefinition((FunctionDefinitionExpression)expression, scope);

                default:
                    return EvaluationError(expression, "Only assignment statements, function calls and function definitions allowed at outer scope");
            }
        }

        private bool EvaluateFunctionDefinition(FunctionDefinitionExpression expression, InterpreterScope scope)
        {
            scope.AddFunction(expression);
            return true;
        }

        private bool EvaluateReturn(ReturnExpression expression, InterpreterScope scope)
        {
            ExpressionBase result;
            if (!expression.Value.ReplaceVariables(scope, out result))
                return EvaluationError(expression.Value, result);

            scope.ReturnValue = result;
            scope.IsComplete = true;
            return true;
        }

        private bool EvaluateLoop(ForExpression forExpression, InterpreterScope scope)
        {
            ExpressionBase range;
            if (!forExpression.Range.ReplaceVariables(scope, out range))
                return EvaluationError(forExpression.Range, range);

            var dict = range as DictionaryExpression;
            if (dict != null)
            {
                var iterator = forExpression.IteratorName;
                foreach (var entry in dict.Entries)
                {
                    var loopScope = new InterpreterScope(scope);

                    ExpressionBase key;
                    if (!entry.Key.ReplaceVariables(scope, out key))
                        return EvaluationError(entry.Key, key);
                    
                    scope.DefineVariable(iterator, key);

                    if (!Evaluate(forExpression.Expressions, loopScope))
                        return false;

                    if (loopScope.IsComplete)
                        break;
                }

                return true;
            }

            return EvaluationError(forExpression.Range, "Cannot iterate over " + forExpression.Range.ToString());
        }

        private bool EvaluateIf(IfExpression ifExpression, InterpreterScope scope)
        {
            ParseErrorExpression error;
            bool result = ifExpression.Condition.IsTrue(scope, out error);
            if (error != null)
                return EvaluationError(ifExpression.Condition, error.Message);

            if (result)
                Evaluate(ifExpression.Expressions, scope);
            else
                Evaluate(ifExpression.ElseExpressions, scope);

            return true;
        }

        private bool CallFunction(FunctionCallExpression expression, InterpreterScope scope)
        {
            var function = scope.GetFunction(expression.FunctionName.Name);
            if (function != null)
            {
                ExpressionBase error;
                scope = expression.GetParameters(function, scope, out error);
                if (scope == null)
                    return EvaluationError(error, ((ParseErrorExpression)error).Message);

                return Evaluate(function.Expressions, scope);
            }

            if (expression.FunctionName.Name == "achievement")
                return ExecuteFunctionAchievement(expression, scope);

            if (expression.FunctionName.Name == "rich_presence_display")
                return ExecuteRichPresenceDisplay(expression, scope);

            if (expression.FunctionName.Name == "rich_presence_conditional_display")
                return ExecuteRichPresenceConditionalDisplay(expression, scope);

            if (expression.FunctionName.Name == "leaderboard")
                return ExecuteLeaderboard(expression, scope);

            return EvaluationError(expression, "Unknown function: " + expression.FunctionName.Name);
        }

        private static FunctionDefinitionExpression _achievementFunction;

        private bool ExecuteFunctionAchievement(FunctionCallExpression expression, InterpreterScope scope)
        {
            if (_achievementFunction == null)
            {
                _achievementFunction = new FunctionDefinitionExpression("achievement");
                // required parameters
                _achievementFunction.Parameters.Add(new VariableExpression("title"));
                _achievementFunction.Parameters.Add(new VariableExpression("description"));
                _achievementFunction.Parameters.Add(new VariableExpression("points"));
                _achievementFunction.Parameters.Add(new VariableExpression("trigger"));

                // additional parameters generated by dumper
                _achievementFunction.Parameters.Add(new VariableExpression("id"));
                _achievementFunction.DefaultParameters["id"] = new IntegerConstantExpression(0);
                _achievementFunction.Parameters.Add(new VariableExpression("published"));
                _achievementFunction.DefaultParameters["published"] = new StringConstantExpression("");
                _achievementFunction.Parameters.Add(new VariableExpression("modified"));
                _achievementFunction.DefaultParameters["modified"] = new StringConstantExpression("");
                _achievementFunction.Parameters.Add(new VariableExpression("badge"));
                _achievementFunction.DefaultParameters["badge"] = new StringConstantExpression("0");
            }

            ExpressionBase error;
            var innerScope = expression.GetParameters(_achievementFunction, scope, out error);
            if (innerScope == null)
                return EvaluationError(error, ((ParseErrorExpression)error).Message);

            var achievement = new ScriptInterpreterAchievementBuilder();

            var stringExpression = innerScope.GetVariable("title") as StringConstantExpression;
            achievement.Title = (stringExpression != null) ? stringExpression.Value : String.Empty;

            stringExpression = innerScope.GetVariable("description") as StringConstantExpression;
            achievement.Description = (stringExpression != null) ? stringExpression.Value : String.Empty;

            stringExpression = innerScope.GetVariable("badge") as StringConstantExpression;
            achievement.BadgeName = (stringExpression != null) ? stringExpression.Value : String.Empty;

            var integerExpression = innerScope.GetVariable("points") as IntegerConstantExpression;
            if (integerExpression != null)
                achievement.Points = integerExpression.Value;

            integerExpression = innerScope.GetVariable("id") as IntegerConstantExpression;
            if (integerExpression != null)
                achievement.Id = integerExpression.Value;

            ParseErrorExpression parseError;
            if (!achievement.PopulateFromExpression(innerScope.GetVariable("trigger"), scope, out parseError))
                return EvaluationError(innerScope.GetVariable("trigger"), parseError);

            var message = achievement.Optimize();
            if (message != null)
                return EvaluationError(expression, message);

            _achievements.Add(achievement.ToAchievement());
            return true;
        }

        private static FunctionDefinitionExpression _richPresenceValueFunction;
        private static FunctionDefinitionExpression _richPresenceLookupFunction;

        private bool ExecuteRichPresenceDisplay(FunctionCallExpression expression, InterpreterScope scope)
        {
            var displayString = expression.Parameters.ElementAt(0) as StringConstantExpression;
            if (displayString == null)
                return EvaluationError(expression.Parameters.ElementAt(0), "First parameter to rich_presence_display must be a string");

            string display;
            if (!ProcessRichPresenceDisplay(displayString, expression.Parameters, 1, scope, out display))
                return false;

            _richPresence.DisplayString = display;
            return true;
        }

        private bool ExecuteRichPresenceConditionalDisplay(FunctionCallExpression expression, InterpreterScope scope)
        {
            ParseErrorExpression error;
            var achievement = new ScriptInterpreterAchievementBuilder();
            if (!achievement.PopulateFromExpression(expression.Parameters.ElementAt(0), scope, out error))
                return EvaluationError(expression.Parameters.ElementAt(0), error);

            var message = achievement.Optimize();
            if (message != null)
                return EvaluationError(expression, message);

            var displayString = expression.Parameters.ElementAt(1) as StringConstantExpression;
            if (displayString == null)
                return EvaluationError(expression.Parameters.ElementAt(0), "First parameter to rich_presence_display must be a string");

            string display;
            if (!ProcessRichPresenceDisplay(displayString, expression.Parameters, 2, scope, out display))
                return false;

            _richPresence.AddConditionalDisplayString(achievement.SerializeRequirements(), display);
            return true;
        }

        private bool ProcessRichPresenceDisplay(StringConstantExpression displayString, ICollection<ExpressionBase> parameters, int parameterOffset, InterpreterScope scope, out string result)
        {
            result = null;

            var builder = new StringBuilder();
            var tokenizer = Tokenizer.CreateTokenizer(displayString.Value);
            while (tokenizer.NextChar != '\0')
            {
                var token = tokenizer.ReadTo('{');
                builder.Append(token.ToString());

                if (tokenizer.NextChar == '\0')
                    break;

                tokenizer.Advance();
                var index = tokenizer.ReadNumber();
                if (tokenizer.NextChar != '}')
                    return EvaluationError(displayString, "malformed index");
                tokenizer.Advance();

                var parameterIndex = Int32.Parse(index.ToString()) + parameterOffset;
                if (parameterIndex >= parameters.Count)
                    return EvaluationError(parameters.ElementAt(0), "invalid parameter index: " + (parameterIndex - parameterOffset));
                var parameter = parameters.ElementAt(parameterIndex) as FunctionCallExpression;
                if (parameter == null)
                    return EvaluationError(parameters.ElementAt(parameterIndex), "parameter must be a rich_presence_ function");

                FunctionDefinitionExpression function;
                if (parameter.FunctionName.Name == "rich_presence_lookup")
                {
                    if (_richPresenceLookupFunction == null)
                    {
                        _richPresenceLookupFunction = new FunctionDefinitionExpression("rich_presence_lookup");
                        _richPresenceLookupFunction.Parameters.Add(new VariableExpression("name"));
                        _richPresenceLookupFunction.Parameters.Add(new VariableExpression("memory"));
                        _richPresenceLookupFunction.Parameters.Add(new VariableExpression("lookup"));
                    }

                    function = _richPresenceLookupFunction;
                }
                else if (parameter.FunctionName.Name == "rich_presence_value")
                {
                    if (_richPresenceValueFunction == null)
                    {
                        _richPresenceValueFunction = new FunctionDefinitionExpression("rich_presence_value");
                        _richPresenceValueFunction.Parameters.Add(new VariableExpression("name"));
                        _richPresenceValueFunction.Parameters.Add(new VariableExpression("memory"));
                    }

                    function = _richPresenceValueFunction;
                }
                else
                {
                    return EvaluationError(parameter, "parameter must be a rich_presence_ function");
                }

                ExpressionBase error;
                var rpScope = parameter.GetParameters(function, scope, out error);
                if (rpScope == null)
                    return EvaluationError(function, error);

                var variableName = rpScope.GetVariable("name") as StringConstantExpression;
                if (variableName == null)
                    return EvaluationError(variableName, "name must be a string");

                var memory = rpScope.GetVariable("memory");

                ExpressionBase addressExpression;
                if (!memory.ReplaceVariables(scope, out addressExpression))
                    return EvaluationError(memory, addressExpression);

                string address;
                if (!EvaluateAddress(addressExpression, scope, out address))
                    return false;

                if (ReferenceEquals(function, _richPresenceLookupFunction))
                {
                    var lookup = rpScope.GetVariable("lookup");

                    ExpressionBase value;
                    if (!lookup.ReplaceVariables(scope, out value))
                        return EvaluationError(lookup, value);

                    var dict = value as DictionaryExpression;
                    if (dict == null)
                        return EvaluationError(parameter.Parameters.ElementAt(2), "parameter does not evaluate to a dictionary");

                    _richPresence.AddLookupField(variableName.Value, dict);
                }
                else
                {
                    _richPresence.AddValueField(variableName.Value);
                }

                builder.Append('@');
                builder.Append(variableName.Value);
                builder.Append('(');
                builder.Append(address);
                builder.Append(')');
            }

            result = builder.ToString();
            return true;
        }

        private bool EvaluateAddress(ExpressionBase expression, InterpreterScope scope, out string address)
        {
            var builder = new StringBuilder();

            Field addressField;
            if (EvaluateAddress(expression, scope, out addressField))
            {
                addressField.Serialize(builder);
                address = builder.ToString();
                return true;
            }

            var mathematic = expression as MathematicExpression;
            if (mathematic != null)
            {
                string left, right;
                if (!EvaluateAddress(mathematic.Left, scope, out left))
                {
                    address = String.Empty;
                    return false; // nested call will have already set error message
                }

                builder.Append(left);

                var integer = mathematic.Right as IntegerConstantExpression;
                switch (mathematic.Operation)
                {
                    case MathematicOperation.Add:
                        builder.Append('_');

                        if (integer != null)
                        {
                            builder.Append('v');
                            builder.Append(integer.Value);
                            address = builder.ToString();
                            return true;
                        }

                        if (!EvaluateAddress(mathematic.Right, scope, out right))
                        {
                            address = String.Empty;
                            return false; // nested call will have already set error message
                        }

                        builder.Append(right);
                        address = builder.ToString();
                        return true;

                    case MathematicOperation.Subtract:
                        if (integer != null)
                        {
                            builder.Append("_v-");
                            builder.Append(integer.Value);
                            address = builder.ToString();
                            return true;
                        }

                        address = String.Empty;
                        return EvaluationError(mathematic.Right, "Only constants can be subtracted");

                    case MathematicOperation.Multiply:
                        if (integer != null)
                        {
                            builder.Append('*');
                            builder.Append(integer.Value);
                            address = builder.ToString();
                            return true;
                        }
                        break;

                    case MathematicOperation.Divide:
                        if (integer != null)
                        {
                            builder.Append('*');
                            var inverted = 1 / (double)integer.Value;
                            builder.Append(inverted);
                            address = builder.ToString();
                            return true;
                        }
                        break;
                }
            }

            var functionCall = expression as FunctionCallExpression;
            if (functionCall != null)
            {
                var function = scope.GetFunction(functionCall.FunctionName.Name);
                if (function == null)
                {
                    address = String.Empty;
                    return EvaluationError(expression, "Unknown function: " + functionCall.FunctionName.Name);
                }

                if (function.Expressions.Count != 1)
                {
                    address = String.Empty;
                    return EvaluationError(expression, "parameter does not evaluate to a memory address");
                }

                ExpressionBase error;
                var innerScope = functionCall.GetParameters(function, scope, out error);
                if (innerScope == null)
                {
                    address = String.Empty;
                    return EvaluationError(error, ((ParseErrorExpression)error).Message);
                }

                var returnExpression = function.Expressions.First() as ReturnExpression;
                if (returnExpression != null)
                    return EvaluateAddress(returnExpression.Value, innerScope, out address);

                return EvaluateAddress(function.Expressions.First(), innerScope, out address);
            }
            
            address = String.Empty;
            return EvaluationError(expression, "parameter does not evaluate to a memory address");
        }

        private bool EvaluateAddress(ExpressionBase expression, InterpreterScope scope, out Field addressField)
        {
            addressField = new Field();

            switch (expression.Type)
            {
                case ExpressionType.IntegerConstant:
                    addressField = new Field { Size = FieldSize.Byte, Type = FieldType.MemoryAddress, Value = (uint)((IntegerConstantExpression)expression).Value };
                    return true;

                case ExpressionType.Return:
                    return EvaluateAddress(((ReturnExpression)expression).Value, scope, out addressField);

                case ExpressionType.FunctionCall:
                    var functionCall = (FunctionCallExpression)expression;
                    var function = scope.GetFunction(functionCall.FunctionName.Name);
                    if (function != null)
                    {
                        if (function.Expressions.Count != 1)
                            return EvaluationError(expression, "parameter does not evaluate to a memory address");

                        ExpressionBase error;
                        var innerScope = functionCall.GetParameters(function, scope, out error);
                        if (scope == null)
                            return EvaluationError(error, ((ParseErrorExpression)error).Message);

                        return EvaluateAddress(function.Expressions.First(), innerScope, out addressField);
                    }

                    var fieldSize = ScriptInterpreterAchievementBuilder.GetMemoryLookupFunctionSize(functionCall.FunctionName.Name);
                    if (fieldSize == FieldSize.None)
                        return EvaluationError(expression, "parameter does not evaluate to a memory address");

                    ExpressionBase addressExpression;
                    if (!functionCall.Parameters.First().ReplaceVariables(scope, out addressExpression))
                        return EvaluationError(functionCall.Parameters.First(), addressExpression);

                    if (!EvaluateAddress(addressExpression, scope, out addressField))
                        return false;

                    addressField = new Field { Size = fieldSize, Type = addressField.Type, Value = addressField.Value };
                    return true;
            }

            return false;
        }

        private static FunctionDefinitionExpression _leaderboardFunction;

        private bool ExecuteLeaderboard(FunctionCallExpression expression, InterpreterScope scope)
        {
            if (_leaderboardFunction == null)
            {
                _leaderboardFunction = new FunctionDefinitionExpression("leaderboard");
                _leaderboardFunction.Parameters.Add(new VariableExpression("title"));
                _leaderboardFunction.Parameters.Add(new VariableExpression("description"));
                _leaderboardFunction.Parameters.Add(new VariableExpression("start"));
                _leaderboardFunction.Parameters.Add(new VariableExpression("cancel"));
                _leaderboardFunction.Parameters.Add(new VariableExpression("submit"));
                _leaderboardFunction.Parameters.Add(new VariableExpression("value"));
            }

            ExpressionBase error;
            scope = expression.GetParameters(_leaderboardFunction, scope, out error);
            if (scope == null)
                return EvaluationError(error, ((ParseErrorExpression)error).Message);

            var leaderboard = new Leaderboard();

            var str = scope.GetVariable("title") as StringConstantExpression;
            if (str != null)
                leaderboard.Title = str.Value;

            str = scope.GetVariable("description") as StringConstantExpression;
            if (str != null)
                leaderboard.Description = str.Value;

            ParseErrorExpression parseError;
            var achievement = new ScriptInterpreterAchievementBuilder();
            if (!achievement.PopulateFromExpression(scope.GetVariable("start"), scope, out parseError))
                return EvaluationError(scope.GetVariable("start"), parseError);
            achievement.Optimize();
            leaderboard.Start = achievement.SerializeRequirements();

            achievement = new ScriptInterpreterAchievementBuilder();
            if (!achievement.PopulateFromExpression(scope.GetVariable("cancel"), scope, out parseError))
                return EvaluationError(scope.GetVariable("cancel"), parseError);
            achievement.Optimize();
            leaderboard.Cancel = achievement.SerializeRequirements();

            achievement = new ScriptInterpreterAchievementBuilder();
            if (!achievement.PopulateFromExpression(scope.GetVariable("submit"), scope, out parseError))
                return EvaluationError(scope.GetVariable("submit"), parseError);
            achievement.Optimize();
            leaderboard.Submit = achievement.SerializeRequirements();

            string value;
            if (!EvaluateAddress(scope.GetVariable("value"), scope, out value))
                return false;
            leaderboard.Value = value;

            _leaderboards.Add(leaderboard);
            return true;
        }

        private bool EvaluationError(ExpressionBase expression, string message)
        {
            ErrorMessage = String.Format("{0}:{1} {2}", expression.Line, expression.Column, message);
            return false;
        }

        private bool EvaluationError(ExpressionBase expression, ExpressionBase error)
        {
            var parseError = error as ParseErrorExpression;
            if (parseError != null)
            {
                if (error.Line != 0)
                    ErrorMessage = String.Format("{0}:{1} {2}", error.Line, error.Column, parseError.Message);
                else
                    ErrorMessage = String.Format("{0}:{1} {2}", expression.Line, expression.Column, parseError.Message);
            }
            else
            {
                ErrorMessage = String.Format("{0}:{1} Unknown error", expression.Line, expression.Column);
            }

            return false;
        }
    }
}
