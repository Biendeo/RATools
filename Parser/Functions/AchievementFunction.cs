using RATools.Parser.Internal;
using System.Diagnostics;

namespace RATools.Parser.Functions
{
    internal class AchievementFunction : FunctionDefinitionExpression
    {
        public AchievementFunction()
            : base("achievement")
        {
            // required parameters
            Parameters.Add(new VariableExpression("title"));
            Parameters.Add(new VariableExpression("description"));
            Parameters.Add(new VariableExpression("points"));
            Parameters.Add(new VariableExpression("trigger"));

            // additional parameters generated by dumper
            Parameters.Add(new VariableExpression("id"));
            DefaultParameters["id"] = new IntegerConstantExpression(0);
            Parameters.Add(new VariableExpression("published"));
            DefaultParameters["published"] = new StringConstantExpression("");
            Parameters.Add(new VariableExpression("modified"));
            DefaultParameters["modified"] = new StringConstantExpression("");
            Parameters.Add(new VariableExpression("badge"));
            DefaultParameters["badge"] = new StringConstantExpression("0");
        }

        public override bool Evaluate(InterpreterScope scope, out ExpressionBase result)
        {
            var achievement = new ScriptInterpreterAchievementBuilder();

            var stringExpression = GetStringParameter(scope, "title", out result);
            if (stringExpression == null)
                return false;
            achievement.Title = stringExpression.Value;

            stringExpression = GetStringParameter(scope, "description", out result);
            if (stringExpression == null)
                return false;
            achievement.Description = stringExpression.Value;

            stringExpression = GetStringParameter(scope, "badge", out result);
            if (stringExpression == null)
                return false;
            achievement.BadgeName = stringExpression.Value;

            var integerExpression = GetIntegerParameter(scope, "points", out result);
            if (integerExpression == null)
                return false;
            achievement.Points = integerExpression.Value;

            integerExpression = GetIntegerParameter(scope, "id", out result);
            if (integerExpression == null)
                return false;
            achievement.Id = integerExpression.Value;

            var trigger = GetParameter(scope, "trigger", out result);
            if (trigger == null)
                return false;

            if (!TriggerBuilderContext.ProcessAchievementConditions(achievement, trigger, scope, out result))
                return false;

            var context = scope.GetContext<AchievementScriptContext>();
            Debug.Assert(context != null);
            context.Achievements.Add(achievement.ToAchievement());
            return true;
        }
    }
}
